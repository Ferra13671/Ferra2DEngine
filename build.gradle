plugins {
    id("com.github.johnrengelman.shadow") version "5.2.0"
    id 'java'
}

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.3"
project.ext.jomlVersion = "1.10.5"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

group = 'com.ferra13671'
version = 'v1.1.4'

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    //implementation 'com.google.code.gson:gson:2.11.0'



    implementation "com.github.Ferra13671:GLTextureUtils:1.2"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")



    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-jawt"
    implementation "org.lwjgl:lwjgl-meow"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opencl"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-opengles"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.joml:joml:${jomlVersion}"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-meow::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengles::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

test {
    useJUnitPlatform()
}

shadowJar {
    dependencies {
        include(dependency ("org.lwjgl:lwjgl-bom:$lwjglVersion"))
        include(dependency ("org.lwjgl:lwjgl"))
        include(dependency ("org.lwjgl:lwjgl-glfw"))
        include(dependency ("org.lwjgl:lwjgl-jawt"))
        include(dependency ("org.lwjgl:lwjgl-meow"))
        include(dependency ("org.lwjgl:lwjgl-openal"))
        include(dependency ("org.lwjgl:lwjgl-opencl"))
        include(dependency ("org.lwjgl:lwjgl-opengl"))
        include(dependency ("org.lwjgl:lwjgl-opengles"))
        include(dependency ("org.lwjgl:lwjgl-stb"))
        include(dependency ("org.joml:joml:${jomlVersion}"))
    }
}

javadoc {
    options.tags = ["Note"]
}

tasks.register("javadocJar", Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
}

build {
    dependsOn javadocJar
    dependsOn(shadowJar)
}